# This is a JSON Grammar (JSG) file for the ShEx Results format.
# The form "OBJNAME  { property:PROPTYPE ... }" matches an object of type OBJTYPE
# The form "RULENAME = NAME1 | NAME2 ..." matches any of NAMEn.
# the form "TERMNAME : "RegExp" matches any literal matching RegExp
# A PROPETYPE can be:
#   TERMINAL - a terminal, all caps in this example.
#   [PROPTYPE] - an array of PROPTYPE.
#   {TERMINAL->PROPTYPE} - a map from TERMINAL to PROPTYPE.
#   (PROPTYPE1|PROPTYPE2...) - any of PROPTYPEn.

.TYPE type; # All objects have a type property corresponding to the production name, e.g. "ShapeTest"

shapeExprTest    = ShapeOrResults | ShapeAndResults | ShapeNotResults | ShapeTest | NodeTest ;
ShapeOrResults   { solution:shapeExprTest }
ShapeAndResults  { solutions:[shapeExprTest] }
ShapeNotResults  { solution:Failure }
Failure          { node:(IRI|BNode) shape:(IRI|BNode) errors:[error] }
error            = MissingProperty ;
MissingProperty  { property:IRI }
NodeTest         { node:(IRI|BNode) shape:(IRI|BNode) }
ShapeTest        { node:(IRI|BNode) shape:IRI solution:tripleExprSolutions? startActs:[SemAct]? }
tripleExprSolutions = EachOfSolutions | OneOfSolutions | TripleConstraintSolutions ;
EachOfSolutions  { solutions:[EachOfSolution] min:INTEGER? max:(INTEGER|"*")? annotations:[Annotation]? semActs:[SemAct]? }
EachOfSolution   { expressions:[tripleExprSolutions] }
OneOfSolutions   { solutions:[OneOfSolution] min:INTEGER? max:(INTEGER|"*")? annotations:[Annotation]? semActs:[SemAct]? }
OneOfSolution    { expressions:[tripleExprSolutions] }
TripleConstraintSolutions { predicate:IRI valueExpr:shapeExpr? min:INTEGER? max:(INTEGER|"*")? solutions:[TestedTriple] annotations:[Annotation]? semActs:[SemAct]? }
TestedTriple     { subject:(IRI|BNode) predicate:IRI object:(IRI|BNode|RDFLiteral) referenced:(shapeExprTest|Recursion)? }
Recursion        { node:(IRI|BNode) shape:(IRI|BNode) }

shapeExpr        = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;
ShapeAnd         { shapeExprs:[shapeExpr] }
ShapeOr          { shapeExprs:[shapeExpr] }
ShapeNot         { shapeExpr:shapeExpr }
Shape            { virtual:BOOL? closed:BOOL? extra:[IRI]? expression:tripleExpr? inherit:[shapeLabel]? semActs:[SemAct]? }
ShapeExternal    {  }
ShapeRef         { reference:IRI } # should be a TERM or some such
SemAct           { name:IRI code:STRING? }
tripleExpr       = EachOf | OneOf | TripleConstraint | Inclusion ;
EachOf           { expressions:[tripleExpr] min:INTEGER? max:(INTEGER|"*")? semActs:[SemAct]? annotations:[Annotation]? }
OneOf            {  expressions:[tripleExpr] min:INTEGER? max:(INTEGER|"*")? semActs:[SemAct]? annotations:[Annotation]? }
Inclusion        { include:shapeLabel }
TripleConstraint { inverse:BOOL? negated:BOOL? predicate:IRI valueExpr:shapeExpr? min:INTEGER? max:(INTEGER|"*")? semActs:[SemAct]? annotations:[Annotation]? }
NodeConstraint   { nodeKind:("iri"|"bnode"|"nonliteral"|"literal")? datatype:IRI? xsFacet* values:[valueSetValue]? }
Annotation       { predicate:IRI object:objectValue }

xsFacet          = stringFacet | numericFacet ;
stringFacet      = (length|minlength|maxlength):INTEGER | pattern:STRING ;
numericFacet     = (mininclusive|minexclusive|maxinclusive|maxexclusive):numericLiteral
                 | (totaldigits|fractiondigits):INTEGER ;
shapeLabel       = IRI|BNODE ;
numericLiteral   = INTEGER|DECIMAL|DOUBLE ;
valueSetValue    = objectValue|Stem|StemRange ;
objectValue      = IRI|RDFLiteral ;
Stem             { stem:IRI } # StemRange with exclusions
StemRange        { stem:(IRI|Wildcard) exclusions:[objectValue|Stem]? }
Wildcard         {  }
RDFLiteral       = SIMPLE_LITERAL|DATATYPE_LITERAL|LANG_LITERAL ;

# Terminals used in productions:
PREFIX           : PN_PREFIX? ':' ; # <http://www.w3.org/TR/turtle/#grammar-production-PNAME_NS> - ":"
IRI              : (PN_CHARS | '.' | ':' | '/' | '\\' | '#' | '@' | '%' | '&' | UCHAR)* ; # <http://www.w3.org/TR/turtle/#grammar-production-IRIREF> - "<>"s
BNODE            : '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)? ; # <http://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL>
BOOL             : "true" | "false" ; # JSON boolean tokens
INTEGER          : [+-]? [0-9] + ; # <http://www.w3.org/TR/turtle/#grammar-production-INTEGER>
DECIMAL          : [+-]? [0-9]* '.' [0-9] + ; # <http://www.w3.org/TR/turtle/#grammar-production-DECIMAL>
DOUBLE           : [+-]? ([0-9] + '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT) ; # <http://www.w3.org/TR/turtle/#grammar-production-DOUBLE>
SIMPLE_LITERAL   : '"' ([^"\\\r\n] | '\\"')* '"' ; # JSON string with '"' at beginning and end
DATATYPE_LITERAL : SIMPLE_LITERAL "^^" IRI ; # JSON string with '"' at beginning, an unescaped '"' followed by '^^' and an IRI
LANG_LITERAL     : SIMPLE_LITERAL LANGTAG ; # JSON string with '"' at beginning, an unescaped '"' followed by '@' and a Turtle LANGTAG                   
STRING           : .* ;

# Terminals use only in other terminals:
PN_PREFIX        : PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)? ;
PN_CHARS_BASE    : [A-Z] | [a-z] | [\u00C0-\u00D6] | [\u00D8-\u00F6]
                 | [\u00F8-\u02FF] | [\u0370-\u037D] | [\u037F-\u1FFF]
                 | [\u200C-\u200D] | [\u2070-\u218F] | [\u2C00-\u2FEF]
                 | [\u3001-\uD7FF] | [\uF900-\uFDCF] | [\uFDF0-\uFFFD]
                 | [\u10000-\uEFFFF] ;
PN_CHARS         : PN_CHARS_U | '-' | [0-9] | '\u00B7' | [\u0300-\u036F] | [\u203F-\u2040] ;
PN_CHARS_U       : PN_CHARS_BASE | '_' ;
UCHAR            : '\\u' HEX HEX HEX HEX
                 | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX ;
HEX              : [0-9] | [A-F] | [a-f] ;
EXPONENT 	 : [eE] [+-]? [0-9]+ ;
LANGTAG          : '@' [a-zA-Z] + ('-' [a-zA-Z0-9] +)* ;

